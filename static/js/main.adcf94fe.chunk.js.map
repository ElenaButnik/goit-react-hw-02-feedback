{"version":3,"sources":["components/Notification/Notification.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Notification","titleText","Statistics","good","neutral","bad","total","positivePercentage","message","FeedbackOptions","handleIncrementGood","handleIncrementNeutral","handleIncrementBad","type","onClick","Section","title","children","defaultProps","App","state","setState","prevState","this","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAEO,SAASA,EAAT,GAAsC,IAAdC,EAAa,EAAbA,UAC7B,OAAO,6BAAKA,ICAP,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBACtD,OACE,gCACE,4CACCD,EACC,+BACE,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,QAGzB,cAACP,EAAD,CAAcQ,QAAQ,yBCdvB,SAASC,EAAT,GAIH,IAHFC,EAGC,EAHDA,oBACAC,EAEC,EAFDA,uBACAC,EACC,EADDA,mBAEA,OACE,gCACE,wBAAQC,KAAK,SAASC,QAASJ,EAA/B,kBAGA,wBAAQG,KAAK,SAASC,QAASH,EAA/B,qBAGA,wBAAQE,KAAK,SAASC,QAASF,EAA/B,oBCbC,SAASG,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC/B,OACE,oCACE,6BAAKD,IACJC,KHAPjB,EAAakB,aAAe,CAC1BjB,UAAW,qB,IIDPkB,E,4MACJC,MAAQ,CACNjB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,oBAAsB,WAEpB,EAAKW,UAAS,SAACC,GACb,MAAO,CACLnB,KAAMmB,EAAUnB,KAAO,O,EAK7BQ,uBAAyB,WAEvB,EAAKU,UAAS,SAACC,GACb,MAAO,CACLlB,QAASkB,EAAUlB,QAAU,O,EAKnCQ,mBAAqB,WAEnB,EAAKS,UAAS,SAACC,GACb,MAAO,CACLjB,IAAKiB,EAAUjB,IAAM,O,4CAK3B,WACE,MAA+BkB,KAAKH,MAA5BjB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACfK,EACNa,KADMb,oBAAqBC,EAC3BY,KAD2BZ,uBAAwBC,EACnDW,KADmDX,mBAE/CY,EAAqBrB,EAAOC,EAAUC,EACtCoB,EAAkCC,KAAKC,MAC1CxB,EAAOqB,EAAsB,KAIhC,OACE,eAACT,EAAD,CAASC,MAAM,wBAAf,UACE,cAACP,EAAD,CACEC,oBAAqBA,EACrBC,uBAAwBA,EACxBC,mBAAoBA,IAEtB,cAACV,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,EACPjB,mBAAoBkB,W,GAxDZG,aA8DHT,ICxDAU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.adcf94fe.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nexport function Notification({ titleText }) {\r\n  return <h3>{titleText}</h3>;\r\n}\r\n\r\nNotification.defaultProps = {\r\n  titleText: \"No feedback given\",\r\n};\r\n\r\nNotification.propTypes = {\r\n  titleText: PropTypes.string,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport { Notification } from \"../Notification/Notification\";\r\n\r\nexport function Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <div>\r\n      <h2>Statistics</h2>\r\n      {total ? (\r\n        <ul>\r\n          <li>Good:{good}</li>\r\n          <li>Neutral:{neutral}</li>\r\n          <li>Bad:{bad}</li>\r\n          <li>Total:{total}</li>\r\n          <li>Positive feedback:{positivePercentage}</li>\r\n        </ul>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport function FeedbackOptions({\r\n  handleIncrementGood,\r\n  handleIncrementNeutral,\r\n  handleIncrementBad,\r\n}) {\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={handleIncrementGood}>\r\n        Good\r\n      </button>\r\n      <button type=\"button\" onClick={handleIncrementNeutral}>\r\n        Neutral\r\n      </button>\r\n      <button type=\"button\" onClick={handleIncrementBad}>\r\n        Bad\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  handleIncrementGood: PropTypes.func,\r\n  handleIncrementNeutral: PropTypes.func,\r\n  handleIncrementBad: PropTypes.func,\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { Statistics } from \"./components/Statistics/Statistics\";\nimport { FeedbackOptions } from \"./components/FeedbackOptions/FeedbackOptions\";\nimport { Section } from \"./components/Section/Section\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrementGood = () => {\n    //console.log('good +')\n    this.setState((prevState) => {\n      return {\n        good: prevState.good + 1,\n      };\n    });\n  };\n\n  handleIncrementNeutral = () => {\n    //console.log(\"neutral +\");\n    this.setState((prevState) => {\n      return {\n        neutral: prevState.neutral + 1,\n      };\n    });\n  };\n\n  handleIncrementBad = () => {\n    //console.log(\"bad +\");\n    this.setState((prevState) => {\n      return {\n        bad: prevState.bad + 1,\n      };\n    });\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const { handleIncrementGood, handleIncrementNeutral, handleIncrementBad } =\n      this;\n    const countTotalFeedback = good + neutral + bad;\n    const countPositiveFeedbackPercentage = Math.round(\n      (good / countTotalFeedback) * 100\n    );\n    //console.log(countPositiveFeedbackPercentage)\n\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          handleIncrementGood={handleIncrementGood}\n          handleIncrementNeutral={handleIncrementNeutral}\n          handleIncrementBad={handleIncrementBad}\n        />\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback}\n          positivePercentage={countPositiveFeedbackPercentage}\n        />\n      </Section>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}